// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[0..2], a=dmux1, b=dmux2, c=dmux3, d=dmux4, e=dmux5, f=dmux6, g=dmux7, h=dmux8);

    RAM8(in=in, load=dmux1, address=address[3..5], out=ram1out);
    RAM8(in=in, load=dmux2, address=address[3..5], out=ram2out);
    RAM8(in=in, load=dmux3, address=address[3..5], out=ram3out);
    RAM8(in=in, load=dmux4, address=address[3..5], out=ram4out);
    RAM8(in=in, load=dmux5, address=address[3..5], out=ram5out);
    RAM8(in=in, load=dmux6, address=address[3..5], out=ram6out);
    RAM8(in=in, load=dmux7, address=address[3..5], out=ram7out);
    RAM8(in=in, load=dmux8, address=address[3..5], out=ram8out);

    Mux8Way16(a=ram1out, b=ram2out, c=ram3out, d=ram4out, e=ram5out, f=ram6out, g=ram7out, h=ram8out, sel=address[0..2], out=out);
}